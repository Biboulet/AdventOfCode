fn get_all_points_with_infinite_area(map: &HashMap<(u32, u32), i32>) -> Vec<i32> {
    return map
        .iter()
        .fold(
            HashSet::new(),
            |mut infinte_points: HashSet<i32>, current_arg| {
                if is_edge(current_arg.0) {
                    infinte_points.insert(*current_arg.1);
                }
                return infinte_points;
            },
        )
        .into_iter()
        .collect::<Vec<i32>>();
}

fn print_dict(map: &HashMap<(u32, u32), i32>) {
    for y in (MIN_SIZE_MAP..=MAX_SIZE_MAP) {
        let mut line: String = String::new();
        for x in (MIN_SIZE_MAP..MAX_SIZE_MAP) {
            let mut char = &map[&(x, y)].to_string().replace("-1", ".");

            line.push_str(char);
        }
        dbg!(line);
    }
}
fn is_edge(coords: &(u32, u32)) -> bool {
    return coords.0 == MIN_SIZE_MAP
        || coords.0 == MAX_SIZE_MAP
        || coords.1 == MIN_SIZE_MAP
        || coords.1 == MAX_SIZE_MAP;
}
fn man_dist(current_point: &(u32, u32), coords: (u32, u32)) -> u32 {
    return current_point.0.abs_diff(coords.0) + current_point.1.abs_diff(coords.1);
}