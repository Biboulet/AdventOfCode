fn print_dict(map: &HashMap<(usize, usize), char>) {
    let x_min = map.keys().map(|(x, _)| x).min().unwrap();
    let y_min = map.keys().map(|(_, y)| y).min().unwrap();
    let x_max = map.keys().map(|(x, _)| x).max().unwrap();
    let y_max = map.keys().map(|(_, y)| y).max().unwrap();
    for y in *y_min..=*y_max {
        let mut line: String = String::new();
        for x in *x_min..=*x_max {
            let char = &map.get(&(x, y)).unwrap_or(&'.').to_string();
            line.push_str(char.as_str());
        }
        println!("{}", line);
    }
}
fn print_dict(map: &HashMap<Coord, char>) {
    let x_min = map.keys().map(|a| a.re).min().unwrap();
    let y_min = map.keys().map(|a| a.im).min().unwrap();
    let x_max = map.keys().map(|a| a.re).max().unwrap();
    let y_max = map.keys().map(|a| a.im).max().unwrap();
    for y in y_min..=y_max {
        let mut line: String = String::new();
        for x in x_min..=x_max {
            let char = &map.get(&Complex::new(x, y)).unwrap_or(&'.').to_string();
            line.push_str(char.as_str());
        }
        println!("{}", line);
    }
}

fn is_edge(coords: &(u32, u32)) -> bool {
    return coords.0 == MIN_SIZE_MAP
        || coords.0 == MAX_SIZE_MAP
        || coords.1 == MIN_SIZE_MAP
        || coords.1 == MAX_SIZE_MAP;
}

fn man_dist(current_point: &(u32, u32), coords: (u32, u32)) -> u32 {
    return current_point.0.abs_diff(coords.0) + current_point.1.abs_diff(coords.1);
}

#[derive(Clone, Copy, PartialEq, Debug, Hash, Eq)]
enum Direction {
    Up,
    Right,
    Down,
    Left,
}

fn get_next_position(direction: Direction) -> Coord {
    return match direction {
        Direction::Up => Complex::<i32>::new(0, -1),
        Direction::Down => Complex::<i32>::new(0, 1),
        Direction::Left => Complex::<i32>::new(-1, 0),
        Direction::Right => Complex::<i32>::new(1, 0),
    };
}